{"filter":false,"title":"getTravelInsuranceQuote.js","tooltip":"/TravelInsurance/fulfilTravelInsuranceQuote/getTravelInsuranceQuote.js","undoManager":{"mark":5,"position":5,"stack":[[{"start":{"row":1,"column":0},"end":{"row":3,"column":0},"action":"remove","lines":["//const lexResponses = require(\"./lexResponses\");","const validateTravelInsurance = require(\"./validateTravelInsurance\");",""],"id":2}],[{"start":{"row":1,"column":0},"end":{"row":48,"column":0},"action":"remove","lines":["","function elicitSlot(sessionAttributes, intentName, slots, slotToElicit, message) {","    return {","        sessionAttributes,","        dialogAction: {","            type: 'ElicitSlot',","            intentName,","            slots,","            slotToElicit,","            message,","        },","    };","}","","function confirmIntent(sessionAttributes, intentName, slots, message) {","    return {","        sessionAttributes,","        dialogAction: {","            type: 'ConfirmIntent',","            intentName,","            slots,","            message,","        },","    };","}","","function close(sessionAttributes, fulfillmentState, message) {","    return {","        sessionAttributes,","        dialogAction: {","            type: 'Close',","            fulfillmentState,","            message,","        },","    };","}","","function delegate(sessionAttributes, slots) {","    return {","        sessionAttributes,","        dialogAction: {","            type: 'Delegate',","            slots,","        },","    };","}","",""],"id":3}],[{"start":{"row":10,"column":0},"end":{"row":26,"column":0},"action":"remove","lines":["    console.log(intentRequest.invocationSource);","    console.log(intentRequest.currentIntent.slots);","    if (tripType == null || tripTraveller == null || tripStartDate == null || tripReturnDate == null || tripLocation == null) {","        console.log(\"inside trip type null check\");","        callback(delegate(sessionAttributes, intentRequest.currentIntent.slots));","    }","","    if (intentRequest.invocationSource === 'DialogCodeHook') {","        const validationResult = validateTravelInsurance(intentRequest.currentIntent.slots);","        if (!validationResult.isValid) {","            const slots = intentRequest.currentIntent.slots;","            slots[`${validationResult.violatedSlot}`] = null;","            callback(elicitSlot(sessionAttributes, intentRequest.currentIntent.name,","                slots, validationResult.violatedSlot, validationResult.message));","            return;","        }",""],"id":4}],[{"start":{"row":10,"column":0},"end":{"row":47,"column":0},"action":"remove","lines":["","        /**","            // Load confirmation history and track the current reservation.","            const reservation = String(JSON.stringify({ ReservationType: 'Hotel', Location: location, RoomType: roomType, CheckInDate: checkInDate, Nights: nights }));","            sessionAttributes.currentReservation = reservation;","","            if (intentRequest.invocationSource === 'DialogCodeHook') {","                // Validate any slots which have been specified.  If any are invalid, re-elicit for their value","                const validationResult = validateHotel(intentRequest.currentIntent.slots);","                if (!validationResult.isValid) {","                    const slots = intentRequest.currentIntent.slots;","                    slots[`${validationResult.violatedSlot}`] = null;","                    callback(elicitSlot(sessionAttributes, intentRequest.currentIntent.name,","                    slots, validationResult.violatedSlot, validationResult.message));","                    return;","                }","","                // Otherwise, let native DM rules determine how to elicit for slots and prompt for confirmation.  Pass price back in sessionAttributes once it can be calculated; otherwise clear any setting from sessionAttributes.","                if (location && checkInDate && nights != null && roomType) {","                    // The price of the hotel has yet to be confirmed.","                    const price = generateHotelPrice(location, nights, roomType);","                    sessionAttributes.currentReservationPrice = price;","                } else {","                    delete sessionAttributes.currentReservationPrice;","                }","                sessionAttributes.currentReservation = reservation;","                callback(delegate(sessionAttributes, intentRequest.currentIntent.slots));","                return;","            }","","            // Booking the hotel.  In a real application, this would likely involve a call to a backend service.","            console.log(`bookHotel under=${reservation}`);","","            delete sessionAttributes.currentReservationPrice;","            delete sessionAttributes.currentReservation;","            sessionAttributes.lastConfirmedReservation = reservation;","        **/",""],"id":5}],[{"start":{"row":10,"column":4},"end":{"row":10,"column":8},"action":"remove","lines":["    "],"id":6},{"start":{"row":11,"column":0},"end":{"row":11,"column":4},"action":"remove","lines":["    "]},{"start":{"row":13,"column":4},"end":{"row":13,"column":8},"action":"remove","lines":["    "]},{"start":{"row":14,"column":0},"end":{"row":14,"column":4},"action":"remove","lines":["    "]},{"start":{"row":15,"column":0},"end":{"row":15,"column":3},"action":"remove","lines":["   "]},{"start":{"row":15,"column":8},"end":{"row":15,"column":9},"action":"remove","lines":[" "]},{"start":{"row":16,"column":0},"end":{"row":16,"column":4},"action":"remove","lines":["    "]},{"start":{"row":17,"column":12},"end":{"row":17,"column":16},"action":"remove","lines":["    "]},{"start":{"row":18,"column":0},"end":{"row":18,"column":1},"action":"remove","lines":[" "]},{"start":{"row":18,"column":12},"end":{"row":18,"column":15},"action":"remove","lines":["   "]},{"start":{"row":19,"column":0},"end":{"row":19,"column":4},"action":"remove","lines":["    "]},{"start":{"row":20,"column":0},"end":{"row":20,"column":2},"action":"remove","lines":["  "]},{"start":{"row":20,"column":12},"end":{"row":20,"column":14},"action":"remove","lines":["  "]},{"start":{"row":21,"column":0},"end":{"row":21,"column":4},"action":"remove","lines":["    "]},{"start":{"row":22,"column":0},"end":{"row":22,"column":4},"action":"remove","lines":["    "]},{"start":{"row":23,"column":16},"end":{"row":23,"column":20},"action":"remove","lines":["    "]},{"start":{"row":24,"column":12},"end":{"row":24,"column":16},"action":"remove","lines":["    "]},{"start":{"row":25,"column":0},"end":{"row":25,"column":1},"action":"remove","lines":[" "]},{"start":{"row":25,"column":8},"end":{"row":25,"column":11},"action":"remove","lines":["   "]},{"start":{"row":26,"column":0},"end":{"row":26,"column":2},"action":"remove","lines":["  "]},{"start":{"row":26,"column":4},"end":{"row":26,"column":6},"action":"remove","lines":["  "]},{"start":{"row":27,"column":0},"end":{"row":27,"column":3},"action":"remove","lines":["   "]},{"start":{"row":27,"column":4},"end":{"row":27,"column":5},"action":"remove","lines":[" "]},{"start":{"row":28,"column":0},"end":{"row":28,"column":4},"action":"remove","lines":["    "]},{"start":{"row":29,"column":0},"end":{"row":29,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":30,"column":0},"end":{"row":30,"column":1},"action":"remove","lines":["}"],"id":7}]]},"ace":{"folds":[],"scrolltop":380,"scrollleft":0,"selection":{"start":{"row":30,"column":0},"end":{"row":30,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":20,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1539083580046,"hash":"fe71c6faa43d29123b1db983a3dfaa5a03acd94a"}